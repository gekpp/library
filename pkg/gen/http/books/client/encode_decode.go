// Code generated by goa v3.0.3, DO NOT EDIT.
//
// books HTTP client encoders and decoders
//
// Command:
// $ goa gen library/design

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	books "library/gen/books"
	booksviews "library/gen/books/views"
	"net/http"
	"net/url"

	goahttp "goa.design/goa/v3/http"
)

// BuildListRequest instantiates a HTTP request object with method and path set
// to call the "books" service "list" endpoint
func (c *Client) BuildListRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListBooksPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("books", "list", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeListResponse returns a decoder for responses returned by the books
// list endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodeListResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("books", "list", err)
			}
			p := NewListLibraryBooksOK(&body)
			view := "default"
			vres := &booksviews.LibraryBooks{p, view}
			if err = booksviews.ValidateLibraryBooks(vres); err != nil {
				return nil, goahttp.ErrValidationError("books", "list", err)
			}
			res := books.NewLibraryBooks(vres)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("books", "list", resp.StatusCode, string(body))
		}
	}
}

// BuildReserveRequest instantiates a HTTP request object with method and path
// set to call the "books" service "reserve" endpoint
func (c *Client) BuildReserveRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		bookID int64
	)
	{
		p, ok := v.(*books.ReservePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("books", "reserve", "*books.ReservePayload", v)
		}
		bookID = p.BookID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ReserveBooksPath(bookID)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("books", "reserve", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeReserveRequest returns an encoder for requests sent to the books
// reserve server.
func EncodeReserveRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*books.ReservePayload)
		if !ok {
			return goahttp.ErrInvalidType("books", "reserve", "*books.ReservePayload", v)
		}
		req.Header.Set("Authorization", p.Token)
		body := NewReserveRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("books", "reserve", err)
		}
		return nil
	}
}

// DecodeReserveResponse returns a decoder for responses returned by the books
// reserve endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodeReserveResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body interface{}
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("books", "reserve", err)
			}
			return body, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("books", "reserve", resp.StatusCode, string(body))
		}
	}
}

// BuildPickupRequest instantiates a HTTP request object with method and path
// set to call the "books" service "pickup" endpoint
func (c *Client) BuildPickupRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		bookID int64
	)
	{
		p, ok := v.(*books.PickupPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("books", "pickup", "*books.PickupPayload", v)
		}
		bookID = p.BookID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: PickupBooksPath(bookID)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("books", "pickup", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodePickupRequest returns an encoder for requests sent to the books pickup
// server.
func EncodePickupRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*books.PickupPayload)
		if !ok {
			return goahttp.ErrInvalidType("books", "pickup", "*books.PickupPayload", v)
		}
		req.Header.Set("Authorization", p.Token)
		body := NewPickupRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("books", "pickup", err)
		}
		return nil
	}
}

// DecodePickupResponse returns a decoder for responses returned by the books
// pickup endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodePickupResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body interface{}
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("books", "pickup", err)
			}
			return body, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("books", "pickup", resp.StatusCode, string(body))
		}
	}
}

// BuildReturnRequest instantiates a HTTP request object with method and path
// set to call the "books" service "return" endpoint
func (c *Client) BuildReturnRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ReturnBooksPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("books", "return", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeReturnRequest returns an encoder for requests sent to the books return
// server.
func EncodeReturnRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*books.ReturnPayload)
		if !ok {
			return goahttp.ErrInvalidType("books", "return", "*books.ReturnPayload", v)
		}
		req.Header.Set("Authorization", p.Token)
		body := NewReturnRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("books", "return", err)
		}
		return nil
	}
}

// DecodeReturnResponse returns a decoder for responses returned by the books
// return endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeReturnResponse may return the following errors:
//	- "invalid-scopes" (type books.InvalidScopes): http.StatusForbidden
//	- error: internal error
func DecodeReturnResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body interface{}
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("books", "return", err)
			}
			return body, nil
		case http.StatusForbidden:
			var (
				body ReturnInvalidScopesResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("books", "return", err)
			}
			return nil, NewReturnInvalidScopes(body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("books", "return", resp.StatusCode, string(body))
		}
	}
}

// BuildSubscribeRequest instantiates a HTTP request object with method and
// path set to call the "books" service "subscribe" endpoint
func (c *Client) BuildSubscribeRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		bookID int64
	)
	{
		p, ok := v.(*books.SubscribePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("books", "subscribe", "*books.SubscribePayload", v)
		}
		bookID = p.BookID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: SubscribeBooksPath(bookID)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("books", "subscribe", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeSubscribeRequest returns an encoder for requests sent to the books
// subscribe server.
func EncodeSubscribeRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*books.SubscribePayload)
		if !ok {
			return goahttp.ErrInvalidType("books", "subscribe", "*books.SubscribePayload", v)
		}
		req.Header.Set("Authorization", p.Token)
		return nil
	}
}

// DecodeSubscribeResponse returns a decoder for responses returned by the
// books subscribe endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeSubscribeResponse may return the following errors:
//	- "invalid-scopes" (type books.InvalidScopes): http.StatusForbidden
//	- error: internal error
func DecodeSubscribeResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body interface{}
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("books", "subscribe", err)
			}
			return body, nil
		case http.StatusForbidden:
			var (
				body SubscribeInvalidScopesResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("books", "subscribe", err)
			}
			return nil, NewSubscribeInvalidScopes(body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("books", "subscribe", resp.StatusCode, string(body))
		}
	}
}

// unmarshalBookResponseBodyToBooksviewsBookView builds a value of type
// *booksviews.BookView from a value of type *BookResponseBody.
func unmarshalBookResponseBodyToBooksviewsBookView(v *BookResponseBody) *booksviews.BookView {
	res := &booksviews.BookView{
		ID:         v.ID,
		Title:      v.Title,
		Annotation: v.Annotation,
		Author:     v.Author,
		Status:     v.Status,
	}
	res.Images = make([]string, len(v.Images))
	for i, val := range v.Images {
		res.Images[i] = val
	}

	return res
}
