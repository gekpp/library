// Code generated by goa v3.0.3, DO NOT EDIT.
//
// books HTTP client types
//
// Command:
// $ goa gen library/design

package client

import (
	books "library/gen/books"
	booksviews "library/gen/books/views"

	goa "goa.design/goa/v3/pkg"
)

// ReserveRequestBody is the type of the "books" service "reserve" endpoint
// HTTP request body.
type ReserveRequestBody struct {
	// id of a subscriber picking up the book
	SubscriberID string `form:"subscriber_id" json:"subscriber_id" xml:"subscriber_id"`
}

// PickupRequestBody is the type of the "books" service "pickup" endpoint HTTP
// request body.
type PickupRequestBody struct {
	// id of a subscriber picking up the book
	SubscriberID string `form:"subscriber_id" json:"subscriber_id" xml:"subscriber_id"`
}

// ReturnRequestBody is the type of the "books" service "return" endpoint HTTP
// request body.
type ReturnRequestBody struct {
	// id of the Book
	BookID int64 `form:"book_id" json:"book_id" xml:"book_id"`
	// id of a subscriber returning the book
	SubscriberID string `form:"subscriber_id" json:"subscriber_id" xml:"subscriber_id"`
}

// ListResponseBody is the type of the "books" service "list" endpoint HTTP
// response body.
type ListResponseBody struct {
	Data []*BookResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
}

// ReturnInvalidScopesResponseBody is the type of the "books" service "return"
// endpoint HTTP response body for the "invalid-scopes" error.
type ReturnInvalidScopesResponseBody string

// SubscribeInvalidScopesResponseBody is the type of the "books" service
// "subscribe" endpoint HTTP response body for the "invalid-scopes" error.
type SubscribeInvalidScopesResponseBody string

// BookResponseBody is used to define fields on response body types.
type BookResponseBody struct {
	ID         *int64  `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Title      *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	Annotation *string `form:"annotation,omitempty" json:"annotation,omitempty" xml:"annotation,omitempty"`
	Author     *string `form:"author,omitempty" json:"author,omitempty" xml:"author,omitempty"`
	// images are a list of book photos
	Images []string `form:"images,omitempty" json:"images,omitempty" xml:"images,omitempty"`
	Status *string  `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
}

// NewReserveRequestBody builds the HTTP request body from the payload of the
// "reserve" endpoint of the "books" service.
func NewReserveRequestBody(p *books.ReservePayload) *ReserveRequestBody {
	body := &ReserveRequestBody{
		SubscriberID: p.SubscriberID,
	}
	return body
}

// NewPickupRequestBody builds the HTTP request body from the payload of the
// "pickup" endpoint of the "books" service.
func NewPickupRequestBody(p *books.PickupPayload) *PickupRequestBody {
	body := &PickupRequestBody{
		SubscriberID: p.SubscriberID,
	}
	return body
}

// NewReturnRequestBody builds the HTTP request body from the payload of the
// "return" endpoint of the "books" service.
func NewReturnRequestBody(p *books.ReturnPayload) *ReturnRequestBody {
	body := &ReturnRequestBody{
		BookID:       p.BookID,
		SubscriberID: p.SubscriberID,
	}
	return body
}

// NewListLibraryBooksOK builds a "books" service "list" endpoint result from a
// HTTP "OK" response.
func NewListLibraryBooksOK(body *ListResponseBody) *booksviews.LibraryBooksView {
	v := &booksviews.LibraryBooksView{}
	v.Data = make([]*booksviews.BookView, len(body.Data))
	for i, val := range body.Data {
		v.Data[i] = unmarshalBookResponseBodyToBooksviewsBookView(val)
	}
	return v
}

// NewReturnInvalidScopes builds a books service return endpoint invalid-scopes
// error.
func NewReturnInvalidScopes(body ReturnInvalidScopesResponseBody) books.InvalidScopes {
	v := books.InvalidScopes(body)
	return v
}

// NewSubscribeInvalidScopes builds a books service subscribe endpoint
// invalid-scopes error.
func NewSubscribeInvalidScopes(body SubscribeInvalidScopesResponseBody) books.InvalidScopes {
	v := books.InvalidScopes(body)
	return v
}

// ValidateBookResponseBody runs the validations defined on BookResponseBody
func ValidateBookResponseBody(body *BookResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Annotation == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("annotation", "body"))
	}
	if body.Author == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("author", "body"))
	}
	if body.Images == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("images", "body"))
	}
	if body.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "body"))
	}
	return
}
