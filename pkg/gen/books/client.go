// Code generated by goa v3.0.3, DO NOT EDIT.
//
// books client
//
// Command:
// $ goa gen library/design

package books

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Client is the "books" service client.
type Client struct {
	ListEndpoint      goa.Endpoint
	ReserveEndpoint   goa.Endpoint
	PickupEndpoint    goa.Endpoint
	ReturnEndpoint    goa.Endpoint
	SubscribeEndpoint goa.Endpoint
}

// NewClient initializes a "books" service client given the endpoints.
func NewClient(list, reserve, pickup, return_, subscribe goa.Endpoint) *Client {
	return &Client{
		ListEndpoint:      list,
		ReserveEndpoint:   reserve,
		PickupEndpoint:    pickup,
		ReturnEndpoint:    return_,
		SubscribeEndpoint: subscribe,
	}
}

// List calls the "list" endpoint of the "books" service.
func (c *Client) List(ctx context.Context) (res *LibraryBooks, err error) {
	var ires interface{}
	ires, err = c.ListEndpoint(ctx, nil)
	if err != nil {
		return
	}
	return ires.(*LibraryBooks), nil
}

// Reserve calls the "reserve" endpoint of the "books" service.
// Reserve may return the following errors:
//	- "invalid-scopes" (type InvalidScopes)
//	- error: internal error
func (c *Client) Reserve(ctx context.Context, p *ReservePayload) (res interface{}, err error) {
	var ires interface{}
	ires, err = c.ReserveEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(interface{}), nil
}

// Pickup calls the "pickup" endpoint of the "books" service.
// Pickup may return the following errors:
//	- "invalid-scopes" (type InvalidScopes)
//	- error: internal error
func (c *Client) Pickup(ctx context.Context, p *PickupPayload) (res interface{}, err error) {
	var ires interface{}
	ires, err = c.PickupEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(interface{}), nil
}

// Return calls the "return" endpoint of the "books" service.
// Return may return the following errors:
//	- "invalid-scopes" (type InvalidScopes)
//	- error: internal error
func (c *Client) Return(ctx context.Context, p *ReturnPayload) (res interface{}, err error) {
	var ires interface{}
	ires, err = c.ReturnEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(interface{}), nil
}

// Subscribe calls the "subscribe" endpoint of the "books" service.
// Subscribe may return the following errors:
//	- "invalid-scopes" (type InvalidScopes)
//	- error: internal error
func (c *Client) Subscribe(ctx context.Context, p *SubscribePayload) (res interface{}, err error) {
	var ires interface{}
	ires, err = c.SubscribeEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(interface{}), nil
}
