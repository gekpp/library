// Code generated by goa v3.0.3, DO NOT EDIT.
//
// books service
//
// Command:
// $ goa gen library/design

package books

import (
	"context"
	booksviews "library/gen/books/views"

	"goa.design/goa/v3/security"
)

// The books service serves operations on books: list, reserve, pickedUp,
// returned, subscribe
type Service interface {
	// List books
	List(context.Context) (res *LibraryBooks, err error)
	// Mark book as reserved. Once a book is reserved timer starts with timeout for
	// the book to become picked up. Timeout is configurable.
	// Once timeout is expired book becomes available
	Reserve(context.Context, *ReservePayload) (res interface{}, err error)
	// Mark book as picked up
	Pickup(context.Context, *PickupPayload) (res interface{}, err error)
	// Mark book as returned
	Return(context.Context, *ReturnPayload) (res interface{}, err error)
	// Subscribe the caller on the next 'book's become available
	Subscribe(context.Context, *SubscribePayload) (res interface{}, err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// JWTAuth implements the authorization logic for the JWT security scheme.
	JWTAuth(ctx context.Context, token string, schema *security.JWTScheme) (context.Context, error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "books"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [5]string{"list", "reserve", "pickup", "return", "subscribe"}

// LibraryBooks is the result type of the books service list method.
type LibraryBooks struct {
	Data []*Book
}

// ReservePayload is the payload type of the books service reserve method.
type ReservePayload struct {
	// JWT used for authentication
	Token string
	// id of the Book
	BookID int64
	// id of a subscriber picking up the book
	SubscriberID string
}

// PickupPayload is the payload type of the books service pickup method.
type PickupPayload struct {
	// JWT used for authentication
	Token string
	// id of the Book
	BookID int64
	// id of a subscriber picking up the book
	SubscriberID string
}

// ReturnPayload is the payload type of the books service return method.
type ReturnPayload struct {
	// JWT used for authentication
	Token string
	// id of the Book
	BookID int64
	// id of a subscriber returning the book
	SubscriberID string
}

// SubscribePayload is the payload type of the books service subscribe method.
type SubscribePayload struct {
	// JWT used for authentication
	Token string
	// id of the Book
	BookID int64
}

// Book is a book
type Book struct {
	ID         int64
	Title      string
	Annotation string
	Author     string
	// images are a list of book photos
	Images []string
	Status string
}

// Token scopes are invalid
type InvalidScopes string

// Error returns an error description.
func (e InvalidScopes) Error() string {
	return "Token scopes are invalid"
}

// ErrorName returns "invalid-scopes".
func (e InvalidScopes) ErrorName() string {
	return "invalid-scopes"
}

// NewLibraryBooks initializes result type LibraryBooks from viewed result type
// LibraryBooks.
func NewLibraryBooks(vres *booksviews.LibraryBooks) *LibraryBooks {
	var res *LibraryBooks
	switch vres.View {
	case "default", "":
		res = newLibraryBooks(vres.Projected)
	}
	return res
}

// NewViewedLibraryBooks initializes viewed result type LibraryBooks from
// result type LibraryBooks using the given view.
func NewViewedLibraryBooks(res *LibraryBooks, view string) *booksviews.LibraryBooks {
	var vres *booksviews.LibraryBooks
	switch view {
	case "default", "":
		p := newLibraryBooksView(res)
		vres = &booksviews.LibraryBooks{p, "default"}
	}
	return vres
}

// newLibraryBooks converts projected type LibraryBooks to service type
// LibraryBooks.
func newLibraryBooks(vres *booksviews.LibraryBooksView) *LibraryBooks {
	res := &LibraryBooks{}
	if vres.Data != nil {
		res.Data = make([]*Book, len(vres.Data))
		for i, val := range vres.Data {
			res.Data[i] = transformBooksviewsBookViewToBook(val)
		}
	}
	return res
}

// newLibraryBooksView projects result type LibraryBooks to projected type
// LibraryBooksView using the "default" view.
func newLibraryBooksView(res *LibraryBooks) *booksviews.LibraryBooksView {
	vres := &booksviews.LibraryBooksView{}
	if res.Data != nil {
		vres.Data = make([]*booksviews.BookView, len(res.Data))
		for i, val := range res.Data {
			vres.Data[i] = transformBookToBooksviewsBookView(val)
		}
	}
	return vres
}

// transformBooksviewsBookViewToBook builds a value of type *Book from a value
// of type *booksviews.BookView.
func transformBooksviewsBookViewToBook(v *booksviews.BookView) *Book {
	if v == nil {
		return nil
	}
	res := &Book{
		ID:         *v.ID,
		Title:      *v.Title,
		Annotation: *v.Annotation,
		Author:     *v.Author,
		Status:     *v.Status,
	}
	if v.Images != nil {
		res.Images = make([]string, len(v.Images))
		for i, val := range v.Images {
			res.Images[i] = val
		}
	}

	return res
}

// transformBookToBooksviewsBookView builds a value of type
// *booksviews.BookView from a value of type *Book.
func transformBookToBooksviewsBookView(v *Book) *booksviews.BookView {
	res := &booksviews.BookView{
		ID:         &v.ID,
		Title:      &v.Title,
		Annotation: &v.Annotation,
		Author:     &v.Author,
		Status:     &v.Status,
	}
	if v.Images != nil {
		res.Images = make([]string, len(v.Images))
		for i, val := range v.Images {
			res.Images[i] = val
		}
	}

	return res
}
