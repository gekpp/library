// Code generated by goa v3.0.3, DO NOT EDIT.
//
// books endpoints
//
// Command:
// $ goa gen library/design

package books

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Endpoints wraps the "books" service endpoints.
type Endpoints struct {
	List      goa.Endpoint
	Reserve   goa.Endpoint
	Pickup    goa.Endpoint
	Return    goa.Endpoint
	Subscribe goa.Endpoint
}

// NewEndpoints wraps the methods of the "books" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	// Casting service to Auther interface
	a := s.(Auther)
	return &Endpoints{
		List:      NewListEndpoint(s),
		Reserve:   NewReserveEndpoint(s, a.JWTAuth),
		Pickup:    NewPickupEndpoint(s, a.JWTAuth),
		Return:    NewReturnEndpoint(s, a.JWTAuth),
		Subscribe: NewSubscribeEndpoint(s, a.JWTAuth),
	}
}

// Use applies the given middleware to all the "books" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.List = m(e.List)
	e.Reserve = m(e.Reserve)
	e.Pickup = m(e.Pickup)
	e.Return = m(e.Return)
	e.Subscribe = m(e.Subscribe)
}

// NewListEndpoint returns an endpoint function that calls the method "list" of
// service "books".
func NewListEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		res, err := s.List(ctx)
		if err != nil {
			return nil, err
		}
		vres := NewViewedLibraryBooks(res, "default")
		return vres, nil
	}
}

// NewReserveEndpoint returns an endpoint function that calls the method
// "reserve" of service "books".
func NewReserveEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*ReservePayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"books:reserve", "books:pickup", "books:return", "books:subscribe"},
			RequiredScopes: []string{"books:reserve"},
		}
		ctx, err = authJWTFn(ctx, p.Token, &sc)
		if err != nil {
			return nil, err
		}
		return s.Reserve(ctx, p)
	}
}

// NewPickupEndpoint returns an endpoint function that calls the method
// "pickup" of service "books".
func NewPickupEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*PickupPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"books:reserve", "books:pickup", "books:return", "books:subscribe"},
			RequiredScopes: []string{"books:pickup"},
		}
		ctx, err = authJWTFn(ctx, p.Token, &sc)
		if err != nil {
			return nil, err
		}
		return s.Pickup(ctx, p)
	}
}

// NewReturnEndpoint returns an endpoint function that calls the method
// "return" of service "books".
func NewReturnEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*ReturnPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"books:reserve", "books:pickup", "books:return", "books:subscribe"},
			RequiredScopes: []string{"books:return"},
		}
		ctx, err = authJWTFn(ctx, p.Token, &sc)
		if err != nil {
			return nil, err
		}
		return s.Return(ctx, p)
	}
}

// NewSubscribeEndpoint returns an endpoint function that calls the method
// "subscribe" of service "books".
func NewSubscribeEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*SubscribePayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"books:reserve", "books:pickup", "books:return", "books:subscribe"},
			RequiredScopes: []string{"books:subscribe"},
		}
		ctx, err = authJWTFn(ctx, p.Token, &sc)
		if err != nil {
			return nil, err
		}
		return s.Subscribe(ctx, p)
	}
}
